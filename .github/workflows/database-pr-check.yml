name: Database PR Safety Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  detect-database-changes:
    name: Detect Database Changes
    runs-on: ubuntu-latest
    outputs:
      has-db-changes: ${{ steps.check.outputs.has-changes }}
      
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check for database changes
      id: check
      run: |
        echo "Checking for database changes..."
        git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(main/src/database/|main/package.json)" || echo "has-changes=false" >> $GITHUB_OUTPUT && exit 0
        echo "has-changes=true" >> $GITHUB_OUTPUT
        
        echo "üìù Database files changed:"
        git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E "(main/src/database/|main/package.json)" || true

  database-safety-checks:
    name: Database Safety Checks
    needs: detect-database-changes
    if: needs.detect-database-changes.outputs.has-db-changes == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.15.1'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build main process
      run: pnpm run build:main
      
    - name: Check for migration conflicts
      run: |
        echo "üîç Checking for migration number conflicts..."
        cd main/src/database/migrations
        
        # Get migration files from base branch
        git ls-tree -r origin/${{ github.base_ref }} --name-only | grep "main/src/database/migrations/" | grep -E "^[0-9]{3}-" > base-migrations.txt || true
        
        # Get migration files from PR
        ls -1 | grep -E "^[0-9]{3}-.*\.ts$" > pr-migrations.txt || true
        
        # Check for number conflicts
        while read migration; do
          number=$(echo $migration | cut -d'-' -f1)
          base_migration=$(grep "^$number-" base-migrations.txt || true)
          if [ ! -z "$base_migration" ] && [ "$base_migration" != "$migration" ]; then
            echo "‚ùå Migration number conflict: $number is used by both:"
            echo "   Base: $base_migration"
            echo "   PR:   $migration"
            exit 1
          fi
        done < pr-migrations.txt
        
        echo "‚úÖ No migration number conflicts"
        
    - name: Test migration rollback safety
      run: |
        cd main
        echo "üîÑ Testing migration rollback safety..."
        
        # Create test database
        rm -rf ~/.crystal-test
        mkdir -p ~/.crystal-test
        export CRYSTAL_DIR=~/.crystal-test
        
        # Run all migrations
        pnpm run db:migrate
        
        # Try to rollback each migration
        MIGRATION_COUNT=$(sqlite3 ~/.crystal-test/crystal.db "SELECT COUNT(*) FROM _migrations;" || echo "0")
        
        for i in $(seq 1 $MIGRATION_COUNT); do
          echo "Testing rollback of migration $i..."
          pnpm run db:rollback || {
            echo "‚ö†Ô∏è  Warning: Migration $i cannot be rolled back"
            echo "   This is expected for some migrations due to SQLite limitations"
          }
        done
        
        echo "‚úÖ Rollback safety check complete"
        
    - name: Check for breaking changes
      run: |
        echo "üîç Checking for potentially breaking changes..."
        
        # Check for DROP TABLE statements
        if git diff origin/${{ github.base_ref }}...HEAD -- 'main/src/database/**/*.ts' | grep -i "DROP TABLE"; then
          echo "‚ö†Ô∏è  Warning: Found DROP TABLE statements - ensure data migration path exists"
        fi
        
        # Check for column removals (in down methods)
        if git diff origin/${{ github.base_ref }}...HEAD -- 'main/src/database/**/*.ts' | grep -i "DROP COLUMN"; then
          echo "‚ö†Ô∏è  Warning: Found DROP COLUMN statements - SQLite doesn't support this easily"
        fi
        
        # Check for NOT NULL additions without defaults
        if git diff origin/${{ github.base_ref }}...HEAD -- 'main/src/database/**/*.ts' | grep -E "NOT NULL(?!.*DEFAULT)"; then
          echo "‚ö†Ô∏è  Warning: Found NOT NULL constraints without DEFAULT - ensure existing data is handled"
        fi
        
        echo "‚úÖ Breaking change check complete"
        
    - name: Run comprehensive database tests
      run: |
        cd main
        echo "üß™ Running comprehensive database tests..."
        pnpm run db:test:ci
        
    - name: Generate migration report
      if: always()
      run: |
        echo "## üìä Database Migration Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # List new migrations
        echo "### New Migrations" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        cd main/src/database/migrations
        git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "main/src/database/migrations/" | grep -E "[0-9]{3}-.*\.ts$" | while read file; do
          basename=$(basename $file)
          echo "- \`$basename\`" >> $GITHUB_STEP_SUMMARY
        done || echo "No new migrations" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Safety Checks" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Migration number conflicts: None" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Database tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Rollback safety: Tested" >> $GITHUB_STEP_SUMMARY