name: Database Migration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  migration-validation:
    name: Validate Migrations
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.15.1'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build main process
      run: pnpm run build:main
      
    - name: Validate migration files
      run: |
        cd main
        echo "🔍 Validating migration files..."
        pnpm run db:validate
      
    - name: Check migration naming conventions
      run: |
        cd main/src/database/migrations
        echo "🔍 Checking migration naming conventions..."
        for file in *.ts; do
          if [[ ! "$file" =~ ^[0-9]{3}-[a-z-]+\.ts$ ]] && [[ "$file" != "index.ts" ]] && [[ "$file" != "types.ts" ]]; then
            echo "❌ Invalid migration name: $file"
            echo "   Migration files must follow pattern: 001-migration-name.ts"
            exit 1
          fi
        done
        echo "✅ All migration names are valid"

  migration-tests:
    name: Migration Tests
    runs-on: ubuntu-latest
    needs: migration-validation
    
    strategy:
      matrix:
        test-scenario: [fresh-install, upgrade-from-legacy, idempotency]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.15.1'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build main process
      run: pnpm run build:main
      
    - name: Run migration tests
      run: |
        cd main
        echo "🧪 Running migration tests..."
        pnpm run db:test
      env:
        CI: true
        
    - name: Test ${{ matrix.test-scenario }}
      run: |
        cd main
        case "${{ matrix.test-scenario }}" in
          fresh-install)
            echo "🆕 Testing fresh installation..."
            rm -rf ~/.crystal-test
            mkdir -p ~/.crystal-test
            export CRYSTAL_DIR=~/.crystal-test
            
            # Run migrations on fresh database
            pnpm run db:migrate
            
            # Verify all tables exist
            sqlite3 ~/.crystal-test/crystal.db "SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;" | wc -l | grep -q "13" || exit 1
            echo "✅ Fresh install test passed"
            ;;
            
          upgrade-from-legacy)
            echo "🔄 Testing upgrade from legacy database..."
            rm -rf ~/.crystal-test
            mkdir -p ~/.crystal-test
            export CRYSTAL_DIR=~/.crystal-test
            
            # Create a minimal legacy database
            sqlite3 ~/.crystal-test/crystal.db <<EOF
            CREATE TABLE projects (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              name TEXT NOT NULL,
              path TEXT NOT NULL UNIQUE,
              created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
            CREATE TABLE sessions (
              id TEXT PRIMARY KEY,
              name TEXT NOT NULL,
              initial_prompt TEXT,
              worktree_name TEXT,
              worktree_path TEXT,
              status TEXT DEFAULT 'pending',
              project_id INTEGER,
              FOREIGN KEY (project_id) REFERENCES projects(id)
            );
            INSERT INTO projects (name, path) VALUES ('Test Project', '/test/path');
            INSERT INTO sessions (id, name, project_id) VALUES ('test-123', 'Test Session', 1);
EOF
            
            # Run migrations
            pnpm run db:migrate
            
            # Verify data was preserved
            sqlite3 ~/.crystal-test/crystal.db "SELECT COUNT(*) FROM projects;" | grep -q "1" || exit 1
            sqlite3 ~/.crystal-test/crystal.db "SELECT COUNT(*) FROM sessions;" | grep -q "1" || exit 1
            
            # Verify new columns were added
            sqlite3 ~/.crystal-test/crystal.db "PRAGMA table_info(sessions);" | grep -q "base_commit" || exit 1
            echo "✅ Legacy upgrade test passed"
            ;;
            
          idempotency)
            echo "🔁 Testing migration idempotency..."
            rm -rf ~/.crystal-test
            mkdir -p ~/.crystal-test
            export CRYSTAL_DIR=~/.crystal-test
            
            # Run migrations multiple times
            pnpm run db:migrate
            pnpm run db:migrate
            pnpm run db:migrate
            
            # Verify migrations table has correct count
            MIGRATION_COUNT=$(sqlite3 ~/.crystal-test/crystal.db "SELECT COUNT(*) FROM _migrations;")
            if [ "$MIGRATION_COUNT" -ne "7" ]; then
              echo "❌ Expected 7 migrations, found $MIGRATION_COUNT"
              exit 1
            fi
            echo "✅ Idempotency test passed"
            ;;
        esac

  migration-rollback:
    name: Test Migration Rollback
    runs-on: ubuntu-latest
    needs: migration-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.15.1'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build main process
      run: pnpm run build:main
      
    - name: Test migration up/down cycle
      run: |
        cd main
        rm -rf ~/.crystal-test
        mkdir -p ~/.crystal-test
        export CRYSTAL_DIR=~/.crystal-test
        
        echo "⬆️  Running all migrations..."
        pnpm run db:migrate
        
        echo "📊 Checking migration status..."
        pnpm run db:status
        
        echo "⬇️  Rolling back last migration..."
        pnpm run db:rollback
        
        echo "⬆️  Re-running migration..."
        pnpm run db:migrate
        
        echo "✅ Migration rollback test passed"

  schema-integrity:
    name: Schema Integrity Check
    runs-on: ubuntu-latest
    needs: [migration-tests, migration-rollback]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.15.1'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build main process
      run: pnpm run build:main
      
    - name: Check schema integrity
      run: |
        cd main
        rm -rf ~/.crystal-test
        mkdir -p ~/.crystal-test
        export CRYSTAL_DIR=~/.crystal-test
        
        # Run migrations
        pnpm run db:migrate
        
        # Verify foreign key constraints
        echo "🔍 Checking foreign key constraints..."
        sqlite3 ~/.crystal-test/crystal.db "PRAGMA foreign_keys=ON; PRAGMA foreign_key_check;" | wc -l | grep -q "0" || {
          echo "❌ Foreign key constraint violations found!"
          sqlite3 ~/.crystal-test/crystal.db "PRAGMA foreign_key_check;"
          exit 1
        }
        
        # Verify indexes exist
        echo "🔍 Checking indexes..."
        EXPECTED_INDEXES=(
          "idx_sessions_project_id"
          "idx_sessions_status"
          "idx_session_outputs_session_id"
          "idx_conversation_messages_session_id"
          "idx_execution_diffs_session_id"
          "idx_prompt_markers_session_id"
          "idx_projects_path"
        )
        
        for index in "${EXPECTED_INDEXES[@]}"; do
          sqlite3 ~/.crystal-test/crystal.db "SELECT name FROM sqlite_master WHERE type='index' AND name='$index';" | grep -q "$index" || {
            echo "❌ Missing index: $index"
            exit 1
          }
        done
        
        echo "✅ All indexes present"
        echo "✅ Schema integrity check passed"

  performance-test:
    name: Migration Performance Test
    runs-on: ubuntu-latest
    needs: migration-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.15.1'
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build main process
      run: pnpm run build:main
      
    - name: Test migration performance
      run: |
        cd main
        rm -rf ~/.crystal-test
        mkdir -p ~/.crystal-test
        export CRYSTAL_DIR=~/.crystal-test
        
        echo "⏱️  Testing migration performance..."
        START_TIME=$(date +%s%N)
        pnpm run db:migrate
        END_TIME=$(date +%s%N)
        
        DURATION=$((($END_TIME - $START_TIME) / 1000000))
        echo "Migration completed in ${DURATION}ms"
        
        # Ensure migrations complete in under 1 second
        if [ $DURATION -gt 1000 ]; then
          echo "❌ Migrations took too long: ${DURATION}ms (expected < 1000ms)"
          exit 1
        fi
        
        echo "✅ Performance test passed"